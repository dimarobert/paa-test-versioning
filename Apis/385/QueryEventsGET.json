{
  "Name": "QueryEvents",
  "Description": "Custom Made",
  "HttpMethod": "GET",
  "IsEnabled": true,
  "OrderIndex": 0,
  "CrossDomainPolicy": "Public",
  "Inputs": [
    {
      "Name": "Page",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 0,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "number",
      "Validations": []
    },
    {
      "Name": "PageSize",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 1,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "number",
      "Validations": []
    },
    {
      "Name": "StartDate",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 2,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": []
    },
    {
      "Name": "EndDate",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 3,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": []
    },
    {
      "Name": "IsOpenToPublic",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 4,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": []
    },
    {
      "Name": "SortColumn",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 5,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": []
    },
    {
      "Name": "SortDirection",
      "IsDeleted": false,
      "IsEnabled": true,
      "OrderIndex": 6,
      "Parameters": {
        "Value": ""
      },
      "InputTypeStr": "text",
      "Validations": []
    }
  ],
  "Actions": [
    {
      "ActionType": "InjectData",
      "OrderIndex": 0,
      "Parameters": {
        "Data": [
          {
            "value": "[page=0]",
            "name": "page"
          },
          {
            "value": "[PageSize=12]",
            "name": "pageSize"
          },
          {
            "value": "[StartDate=\"1970-01-01\"]",
            "name": "StartDate"
          },
          {
            "value": "[EndDate=\"3000-01-01\"]",
            "name": "EndDate"
          },
          {
            "value": "[IsOpenToPublic=]",
            "name": "IsOpenToPublic"
          },
          {
            "value": "[sortColumn=userid]",
            "name": "sortColumn"
          },
          {
            "value": "[sortDirection=\"Ascending\"]",
            "name": "sortDirection"
          }
        ]
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "LoadEntitiesFromSql",
      "OrderIndex": 1,
      "Condition": "false",
      "Parameters": {
        "ConnectionString": "",
        "SqlQuery": "--declare @rowOffset int = @page * @pageSize;\n\nSELECT  E.Id, CONVERT(nvarchar(100), E.DateAndTime, 127) as eventDate, CONVERT(nvarchar(100), E.RegisterByDate, 127) \nas registerByDate, E.Location as placeName, E.City as eventCity, E.Type as eventType, ET.TypeName as eventTypeName, \n   E.EventTitle as title, E.ThumbnailId as eventThumbnail, E.BannerId as eventBanner,  E.Description as body,\n   SUBSTRING(UA.AuthenticationToken, LEN('DnnSharpOpenIdConnect-') + 1, 8000) as creatorId, \n  (SELECT PropertyValue AS ProfileImage FROM UserProfile UP WHERE UserID = E.CreatedBy AND PropertyDefinitionID = 27) \n  AS creatorProfilePicture, \n  (select Top 1 EF.FileId from app.EventFile EF where EF.EventId=E.id and EF.FileType ='Invitation File') as invitationFile, \n  (SELECT COUNT(UserID) FROM app.AttendingMember where EventID = E.Id and IsConfirmed = 'True')\n\t\t + (SELECT COUNT(GuestID) FROM app.AttendingGuest where EventID = E.Id and IsConfirmed = 'True') as numberOfParticipants,\n   (SELECT COUNT(UserID) FROM app.AttendingMember where EventID = E.Id and IsConfirmed = 'True') as numberOfMembersConfirmed,\n   (SELECT COUNT(GuestID) FROM app.AttendingGuest where EventID = E.Id and IsConfirmed = 'True') as numberOfGuestsConfirmed\n   ,(select 'Not Confirmed') as Status\n   ,case when \n               E.AvailableSeats <= (SELECT COUNT(UserID) FROM app.AttendingMember where EventID = E.Id and IsConfirmed = 'True')\n\t\t                            + (SELECT COUNT(GuestID) FROM app.AttendingGuest where EventID = E.Id and IsConfirmed = 'True') \n\t\t\t\t\t\t\t\t\tand getdate() <= IIF(E.RegisterByDate is NULL or E.RegisterByDate= '', dateadd(day,1, getdate()),E.RegisterByDate)  then 'Waiting List'\n\t\t  when E.AvailableSeats > (SELECT COUNT(UserID) FROM app.AttendingMember where EventID = E.Id and IsConfirmed = 'True')\n\t\t                        + (SELECT COUNT(GuestID) FROM app.AttendingGuest where EventID = E.Id and IsConfirmed = 'True')  \n\t\t\t\t\t\t\t\t  and getdate() <= IIF(E.RegisterByDate is NULL or E.RegisterByDate= '', dateadd(day,1,getdate()),E.RegisterByDate)   then 'Joinable'\n\t\t else 'Closed' End as EventStatus\nFROM app.Event E inner join app.EventType ET on ET.Id=E.Type\n                 left join Users U on U.userId=E.CreatedBy\n\t\t\t\t left join UserAuthentication UA On UA.UserID = U.UserID\n \nwhere E.DateAndTime>= @StartDate and E.DateAndTime<=@EndDate and E.IsOpenToPublic = (CASE WHEN @IsOpenToPublic = ''  THEN E.IsOpenToPublic ELSE @IsOpenToPublic END)\n\n\n\n--OFFSET  @rowOffset ROWS\n--FETCH NEXT @pageSize ROWS ONLY;",
        "BindTokens": [
          {
            "value": "[StartDate]",
            "name": "StartDate"
          },
          {
            "value": "[EndDate]",
            "name": "EndDate"
          },
          {
            "value": "[IsOpenToPublic]",
            "name": "IsOpenToPublic"
          }
        ],
        "EntityName": "AllEvents",
        "EntityProps": [
          {
            "value": "id",
            "name": "Id"
          },
          {
            "value": "eventDate",
            "name": "eventDate"
          },
          {
            "value": "registerByDate",
            "name": "registerByDate"
          },
          {
            "value": "placeName",
            "name": "placeName"
          },
          {
            "value": "eventCity",
            "name": "eventCity"
          },
          {
            "value": "eventType",
            "name": "eventType"
          },
          {
            "value": "eventTypeName",
            "name": "eventTypeName"
          },
          {
            "value": "title",
            "name": "title"
          },
          {
            "value": "eventThumbnail",
            "name": "eventThumbnail"
          },
          {
            "value": "body",
            "name": "body"
          },
          {
            "value": "creatorId",
            "name": "creatorId"
          },
          {
            "value": "creatorProfilePicture",
            "name": "creatorProfilePicture"
          },
          {
            "value": "invitationFile",
            "name": "invitationFile"
          },
          {
            "value": "numberOfParticipants",
            "name": "numberOfParticipants"
          },
          {
            "value": "numberOfMembersConfirmed",
            "name": "numberOfMembersConfirmed"
          },
          {
            "value": "numberOfGuestsConfirmed",
            "name": "numberOfGuestsConfirmed"
          },
          {
            "value": "eventBanner",
            "name": "eventBanner"
          },
          {
            "value": "memberStatus",
            "name": "status"
          },
          {
            "value": "eventStatus",
            "name": "eventStatus"
          }
        ],
        "OnError": []
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "LoadEntitiesFromSql",
      "OrderIndex": 2,
      "Parameters": {
        "ConnectionString": "",
        "SqlQuery": "SELECT EntryID as UserId, ListName as FirstName, Value as LastName, \n   ParentID AS ProfileImage\nFROM Lists",
        "BindTokens": "",
        "EntityName": "AllEvents",
        "EntityProps": [
          {
            "value": "userId",
            "name": "UserId"
          },
          {
            "value": "firstName",
            "name": "FirstName"
          },
          {
            "value": "lastName",
            "name": "LastName"
          },
          {
            "value": "profileImage",
            "name": "ProfileImage"
          }
        ],
        "OnError": []
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "OrderEntityList",
      "OrderIndex": 3,
      "Parameters": {
        "EntityName": "AllEvents",
        "SortProperty": "[SortColumn]",
        "SortDirection": {
          "Expression": "[SortDirection]",
          "Value": "",
          "IsExpression": true,
          "Parameters": {}
        },
        "OutputEntityName": "SortedEvents"
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "PaginateEntityList",
      "OrderIndex": 4,
      "Condition": "",
      "Parameters": {
        "EntityName": "SortedEvents",
        "PageSize": "[PageSize]",
        "Page": "[Page]",
        "OutputEntityName": "PagedEvents"
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "ExecuteActionsOnEntityList",
      "OrderIndex": 5,
      "Parameters": {
        "EntityName": "PagedEvents",
        "Filters": "",
        "ContextBehavior": {
          "Expression": "",
          "Value": "NoPreserve",
          "IsExpression": false,
          "Parameters": {}
        },
        "ActionList": [
          {
            "Id": -1,
            "$_uid": "action15767847469095490",
            "Parameters": {
              "ConnectionString": "",
              "SqlQuery": "SELECT top 10 EntryID as UserId, ListName as FirstName, Value as LastName, \n   ParentID AS ProfileImage\nFROM Lists\nwhere EntryID > CAST(@eventId as int)*70",
              "BindTokens": [
                {
                  "value": "[PagedEvents:Userid]",
                  "name": "eventId"
                }
              ],
              "EntityName": "EventMembers[PagedEvents:UserId]",
              "EntityProps": [
                {
                  "value": "firstName",
                  "name": "FirstName"
                },
                {
                  "value": "lastName",
                  "name": "lastName"
                },
                {
                  "value": "profilePicture",
                  "name": "ProfileImage"
                },
                {
                  "value": "id",
                  "name": "UserId"
                }
              ],
              "OnError": []
            },
            "ActionType": "LoadEntitiesFromSql",
            "$_isOpen": false,
            "$_isLoaded": true,
            "$_isFocus": true,
            "Definition": {
              "IsClientAction": false,
              "Settings": {
                "Group": "Entities"
              }
            }
          },
          {
            "Id": -1,
            "$_uid": "action15767847469098370",
            "Parameters": {
              "EntityName": "",
              "EntityProps": [
                {
                  "value": "abc",
                  "name": "eventThumbnail"
                },
                {
                  "value": "def",
                  "name": "creatorProfilePicture"
                },
                {
                  "value": "ghi",
                  "name": "invitationFile"
                },
                {
                  "value": "jkl",
                  "name": "eventBanner"
                }
              ],
              "EntityListProperties": [
                {
                  "value": "EventMembers[PagedEvents:userId]",
                  "name": "participants"
                }
              ]
            },
            "ActionType": "ExtendEntity",
            "$_isOpen": false,
            "$_isLoaded": true,
            "$_isFocus": true,
            "Definition": {
              "IsClientAction": false,
              "Settings": {
                "Group": "Entities"
              }
            }
          },
          {
            "Id": -1,
            "$_uid": "action15767847469095253",
            "Parameters": {
              "EntityName": "EventMembers[PagedEvents:UserId]",
              "Filters": "",
              "ContextBehavior": {
                "Expression": "",
                "Value": "NoPreserve",
                "IsExpression": false,
                "Parameters": {}
              },
              "ActionList": [
                {
                  "Id": -1,
                  "$_uid": "action15767847168932954",
                  "Parameters": {
                    "EntityName": "",
                    "EntityProps": [
                      {
                        "value": "zzz",
                        "name": "profilePicture"
                      }
                    ],
                    "EntityListProperties": ""
                  },
                  "ActionType": "ExtendEntity",
                  "$_isOpen": false,
                  "$_isLoaded": true,
                  "$_isFocus": true,
                  "Definition": {
                    "IsClientAction": false,
                    "Settings": {
                      "Group": "Entities"
                    }
                  }
                }
              ],
              "ContinueOnError": "",
              "OnError": []
            },
            "ActionType": "ExecuteActionsOnEntityList",
            "$_isOpen": false,
            "$_isLoaded": true,
            "$_isFocus": true,
            "Definition": {
              "IsClientAction": false,
              "Settings": {
                "Group": "Entities"
              }
            }
          }
        ],
        "ContinueOnError": "",
        "OnError": []
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "CreateJsonObject",
      "OrderIndex": 6,
      "Condition": "",
      "Parameters": {
        "Properties": [
          {
            "Name": {
              "Value": "results",
              "IsExpression": false
            },
            "Value": {
              "Value": "PagedEvents",
              "IsExpression": false
            },
            "TypeValidation": {
              "Value": "EntityList",
              "IsExpression": false,
              "Parameters": {}
            }
          },
          {
            "Name": {
              "Value": "page",
              "IsExpression": false
            },
            "Value": {
              "Value": "[Page]",
              "IsExpression": false
            },
            "TypeValidation": {
              "Value": "Number",
              "IsExpression": false,
              "Parameters": {}
            }
          },
          {
            "Name": {
              "Value": "pageSize",
              "IsExpression": false
            },
            "Value": {
              "Value": "[pageSize]",
              "IsExpression": false
            },
            "TypeValidation": {
              "Value": "Number",
              "IsExpression": false,
              "Parameters": {}
            }
          },
          {
            "Name": {
              "Value": "totalResults",
              "IsExpression": false
            },
            "Value": {
              "Value": "[AllEvents:Count]",
              "IsExpression": false
            },
            "TypeValidation": {
              "Value": "Number",
              "IsExpression": false,
              "Parameters": {}
            }
          }
        ],
        "OutputTokenName": "JSONEvents"
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    },
    {
      "ActionType": "RawResponse",
      "OrderIndex": 7,
      "Parameters": {
        "Content": "[JSONEvents]",
        "HttpCode": "",
        "Headers": [
          {
            "value": "application/json",
            "name": "Content-Type"
          }
        ]
      },
      "IsEnabled": true,
      "ExecutionType": "OnExecute",
      "Metadata": {}
    }
  ],
  "OnErrorActions": []
}