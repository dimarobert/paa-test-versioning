@inherits avt.MyTokens.Core.ParsingEngine.RazorTemplate
@using avt.MyTokens.Core.Objects
@{
System.Diagnostics.Debugger.Launch();
var x = Tokens.Localization.BrowserCultureCode.ToString();
    var tknParams = Tokens.TknParams as TknParamsObject;
 
    ITokenObject localizationKey;
    if (!tknParams.Properties.TryGetValue("Key", out localizationKey)) {
        throw new ArgumentException("Parameter is required.", "Key");
    }
 
    var formatArguments = new List<string>();
 
    int i = 0;
    ITokenObject fmtArg;
    while (tknParams.Properties.TryGetValue("a" + i, out fmtArg)) {
        formatArguments.Add(fmtArg.ToString());
        i++;
    }
 
    var formatStr = GetLocalizationString(localizationKey.ToString());
    var result = string.Format(formatStr, formatArguments.ToArray());
}
 
@result
 
 
 
 
@functions{
 
    public string GetLocalizationString(string localizationKey) {
        /// TODO: Get the string format from somewhere, like a db token, based on the <see param="localizationKey" />.
        return "{0}, {1}";
    }
 
}