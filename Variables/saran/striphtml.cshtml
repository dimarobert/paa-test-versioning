@inherits avt.MyTokens.Core.ParsingEngine.RazorTemplate
@using HtmlAgilityPack
@{

    string input = Tokens.TknParams.Input.ToString();
    var doc = new HtmlDocument();
    doc.LoadHtml(input);

    var acceptableTags = new string[] { "sub", "sup" };

    var nodes = new Queue<HtmlNode>(doc.DocumentNode.SelectNodes("./*|./text()"));
    while (nodes.Count > 0) {
        var node = nodes.Dequeue();
        var parentNode = node.ParentNode;

        var childNodes = node.SelectNodes("./*|./text()");
        if (!IsRemovableTag(node) && childNodes != null) {
            foreach (var child in childNodes) {
                nodes.Enqueue(child);
            }
        }

        if (!acceptableTags.Contains(node.Name) && node.Name != "#text") {

            if (!IsRemovableTag(node) && childNodes != null) {
                foreach (var child in childNodes) {
                    parentNode.InsertBefore(child, node);
                }
            }

            parentNode.RemoveChild(node);

        }
    }
}

@doc.DocumentNode.InnerHtml

@functions {
    public bool IsTag(HtmlNode node, string tagName) {
        return string.Equals(node.Name, tagName, StringComparison.OrdinalIgnoreCase);
    }

    public bool IsRemovableTag(HtmlNode node) {
        return IsTag(node, "script") || IsTag(node, "style");
    }
}
